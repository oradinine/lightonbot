import fs from 'fs';
import { Telegraf } from 'telegraf';
import * as dotenv from 'dotenv';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { Low } from 'lowdb';
import { JSONFile } from 'lowdb/node';
import { status, nextStatus, maybeStatus } from './test.js';
import { log } from 'util';
// import { outputOn, outputOff } from "./countHours.js";

const __dirname = dirname(fileURLToPath(import.meta.url));
const file = join(__dirname, 'db.json');
const adapter = new JSONFile(file);
const db = new Low(adapter);
await db.read();

const statsFile = join(__dirname, 'botstats.json');
const statsAdapter = new JSONFile(statsFile);
const statsDb = new Low(statsAdapter);
await statsDb.read();
statsDb.data = statsDb.data;

const countHoursDB = join(__dirname, 'countHours.json');
const countHoursAdapter = new JSONFile(countHoursDB);
const countHoursDb = new Low(countHoursAdapter);
await countHoursDb.read();
countHoursDb.data = countHoursDb.data;

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

const data = JSON.parse(fs.readFileSync('db.json'));

const response = data.statusBar;

const light = response ? "–°–≤—ñ—Ç–ª–æ –∑'—è–≤–∏–ª–æ—Å—å üí°" : '–°–≤—ñ—Ç–ª–æ –∑–Ω–∏–∫–ª–æ üî¶';

db.data = db.data;

bot.start((ctx) =>
  ctx.reply(
    '–í—ñ—Ç–∞—é, –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ —î —Å–≤—ñ—Ç–ª–æ: –Ω–∞–ø–∏—à—ñ—Ç—å "—Å–≤—ñ—Ç–ª–æ" —á–∏ "—Å–≤–µ—Ç", —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /checklight (–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º—ñ—Ç—å –Ω–∞ –Ω–µ—ó —É —Ü—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ üòâ)',
  ),
);

bot.command('stats', (ctx) => {

  statsDb.data.comandUsage += 1;
  statsDb.data.lastUsage = new Date().toLocaleTimeString();
  statsDb.data.users = [
    ...statsDb.data.users,
    {
      name: ctx.message.from.first_name,
      time: new Date().toLocaleTimeString(),
      date: new Date().toLocaleDateString(),
      message: 'command stats',
    },
  ];

  const stats = countHoursDb.data.totalToday[Object.keys(countHoursDb.data.totalToday)[Object.keys(countHoursDb.data.totalToday).length - 1]];
  const date = stats.date;
  const lighton = stats.lighton;
  const lightoff = stats.lightoff;
  // ctx.replyWithHTML(
  //   `<b>${date}</b>\n\n–°–≤—ñ—Ç–ª–æ –±—É–ª–æ –ø—Ä–æ—Ç—è–≥–æ–º ${lighton.hours} –≥–æ–¥. ${lighton.minutes} —Ö–≤. \n–°–≤—ñ—Ç–ª–∞ –Ω–µ –±—É–ª–æ –ø—Ä–æ—Ç—è–≥–æ–º ${lightoff.hours} –≥–æ–¥. ${lightoff.minutes} —Ö–≤.\n\n‚ùóÔ∏è –î–∞–Ω–Ω—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–º—ñ–Ω–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–≤—ñ—Ç–ª–∞, –∞ –Ω–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–∏.`,
  // );
  ctx.reply('–ü–æ–∫–∏ —â–æ —Ü—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–±–∞—á—Ç–µ –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ üòî');
  statsDb.write();
  console.log('Stats on comand is updated');
});

bot.command('checklight', async (ctx) => {
  statsDb.data.comandUsage += 1;
  statsDb.data.lastUsage = new Date().toLocaleTimeString();
  statsDb.data.users = [
    ...statsDb.data.users,
    {
      name: ctx.message.from.first_name,
      time: new Date().toLocaleTimeString(),
      date: new Date().toLocaleDateString(),
      message: 'command checklight',
    },
  ];

  const name = ctx.message.from.first_name;
  ctx.reply(`–í—ñ—Ç–∞—é, ${name}! ${response ? `–°–≤—ñ—Ç–ª–æ —î üí°\n ${db.data.lighton}` : `–°–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î üî¶\n\n${db.data.lightoff}`}
    \n ${status} \n ${maybeStatus} \n ${nextStatus}
    `);
  await statsDb.write();
  console.log('Stats on comand is updated');
});

bot.command('help', (ctx) => {
  statsDb.data.comandUsage += 1;
  statsDb.data.lastUsage = new Date().toLocaleTimeString();
  statsDb.data.users = [
    ...statsDb.data.users,
    {
      name: ctx.message.from.first_name,
      time: new Date().toLocaleTimeString(),
      date: new Date().toLocaleDateString(),
      message: 'command help',
    },
  ];
  const name = ctx.message.from.first_name;
  ctx.reply(
    `–í—ñ—Ç–∞—é, ${name}! \n–¶–µ–π –±–æ—Ç –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–≤—ñ—Ç–ª–∞. –§–∞–∫—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è –¥–æ—Å—Ç—É–ø –æ–∫—Ä–µ–º–æ—ó ip-–∞–¥—Ä–µ—Å–∏ –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —è–∫—â–æ –¥–æ—Å—Ç—É–ø —î —Ç–æ —ñ —Å–≤—ñ—Ç–ª–æ —î. –ù–∞ 100% –¥–æ–≤—ñ—Ä—è—Ç–∏ –±–æ—Ç—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Ç–æ–º—É —â–æ —Å–≤—ñ—Ç–ª–æ –º–æ–∂–µ –±—É—Ç–∏, –∞–ª–µ —è–∫—â–æ –Ω–µ –±—É–¥–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Ç–æ –±–æ—Ç –±—É–¥–µ –∫–∞–∑–∞—Ç–∏ —â–æ —Å–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î.`,
  );
  statsDb.write();
  console.log('Stats on comand is updated');
});

bot.on('message', async (ctx) => {
  if (ctx.message.text.includes('—Å–≤—ñ—Ç–ª–æ') || ctx.message.text.includes('—Å–≤–µ—Ç') || ctx.message.text.includes('–°–≤–µ—Ç') || ctx.message.text.includes('–°–≤—ñ—Ç–ª–æ')) {
    statsDb.data.comandUsage += 1;
    statsDb.data.lastUsage = new Date().toLocaleTimeString();
    statsDb.data.users = [
      ...statsDb.data.users,
      {
        name: ctx.message.from.first_name,
        time: new Date().toLocaleTimeString(),
        date: new Date().toLocaleDateString(),
        message: 'message',
      },
    ];

    ctx.reply(`${response ? '–°–≤—ñ—Ç–ª–æ —î üí°' : '–°–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î üî¶'}`);

    await statsDb.write();
    console.log('Stats on message is updated');
  } else {
    statsDb.data.comandUsage += 1;
    statsDb.data.lastUsage = new Date().toLocaleTimeString();
    statsDb.data.users = [
      ...statsDb.data.users,
      {
        name: ctx.message.from.first_name,
        time: new Date().toLocaleTimeString(),
        date: new Date().toLocaleDateString(),
        message: 'dont understand',
      },
    ];

    ctx.reply('–ù–µ —Ä–æ–∑—É–º—ñ—é üòî');

    await statsDb.write();
    console.log("Stats on i dont' undestand is updated");
  }
});
console.log(`Bot is working ${new Date().toLocaleTimeString()}`);
bot.launch();
